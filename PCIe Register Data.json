{
    "Control Entire": {
        "Control Full Register": [
            " >>Bus Master Enable |+|  – Controls the ability of a PCI Express",
            "     Endpoint to issue Memory and I/O Read/Write Requests, and",
            "     the ability of a Root or Switch Port to forward Memory and I/O",
            "     Read/Write Requests in the Upstream direction.",
            "     Endpoints:",
            "     When this bit is set, the PCI Express Function is allowed to",
            "     issue Memory or I/O Requests.",
            "",
            "     Bus Master Enable |-| ",
            "     When this bit is clear, the PCI Express Function is not allowed",
            "     to issue any Memory or I/O Requests.",
            "",
            "",
            " >>Special Cycle Enable",
            "     Special Cycle Enable – Does not apply to PCI Express and must be hardwired to 0b.",
            "",
            " >>MemWINV",
            "     Memory Write and Invalidate – Does not apply to PCI Express and must be hardwired to 0b.",
            "",
            " >>VGASnoop",
            "      VGA Palette Snoop – Does not apply to PCI Express and must be hardwired to 0b.",
            "",    
            " >>ParErr#",
            "     Parity Error Response – This bit controls the logging of poisoned TLPs",
            "     in the Master Data Parity Error bit in the Status register.",
            "     A Root Complex Integrated Endpoint that is not associated with",
            "     a Root Complex Event Collector is permitted to hardwire this bit",
            "     to 0b.",
            "",
            "     Default value of this bit is 0b.",
            "",
            " >>DSEL Stepping",
            "     DSEL Stepping/Wait Cycle Control – Does not apply to PCI Express and must be hardwired",
            "     to 0b.",
            "",
            " >>SERR",     
            "     SERR# Enable – ", 
            "     When Set, this bit enables reporting of Non-fatal and Fatal",
            "     errors detected by the Function to the Root Complex. Note that",
            "     errors are reported if enabled either through this bit or through",
            "     the PCI Express specific bits in the Device Control register.",
            "",
            "     In addition, for Functions with Type 1 Configuration Space",
            "     headers, this bit controls transmission by the primary interface of",
            "     ERR_NONFATAL and ERR_FATAL error Messages forwarded",
            "     from the secondary interface. This bit does not affect the",
            "     transmission of forwarded ERR_COR messages.",
            "",
            "     A Root Complex Integrated Endpoint that is not associated with",
            "     a Root Complex Event Collector is permitted to hardwire this bit",
            "     to 0b.",
            "     Default value of this bit is 0b.",
            "",
            " >>FastB2B#",
            "     Fast Back-to-Back Transactions Enable – Does not apply to PCI Express and must be",
            "     hardwired to 0b.",
            "",
            " >>DisINTx",     
            "     Interrupt Disable – Controls the ability of a PCI Express",
            "     Function to generate INTx interrupts. When Set, Functions are prevented from ",
            "     asserting INTx interrupts. Any INTx emulation interrupts already asserted by the ",
            "     Function must be deasserted when this bit is Set.",
            "",
            "     INTx interrupts use virtual wires that must, if asserted, be deasserted using the ",
            "     appropriate Deassert_INTx message(s) when this bit is Set. Only the INTx virtual wire ",
            "     interrupt(s) associated with the Function(s) for which this bit is Set are affected.",
            "",
            "     For Endpoints that generate INTx interrupts, this bit is required.",
            "     For Endpoints that do not generate INTx interrupts this bit is optional.",
            "     If not implemented, this bit must be hardwired to 0b.",
            "     For Root Ports, Switch Ports, and Bridges that generate INTx interrupts on their own",
            "     behalf, this bit is required. This bit has no effect on interrupts that pass through the",
            "     Port from the secondary side.",
            "",
            "     For Root Ports, Switch Ports, and Bridges that do not generate INTx interrupts on",
            "     their own behalf this bit is optional. If not implemented, this bit must be",
            "     hardwired to 0b.",
            "",
            "     Default value of this bit is 0b."
        ]
    }, 
    "Status Entire": {
        "Status Entire Register":[
            " >>INTx",
            "   Interrupt Status – When Set, indicates that an INTx emulation",
            "   interrupt is pending internally in the Function.",
            "   Note that INTx emulation interrupts forwarded by Root and",
            "   Switch Ports from devices Downstream of the Root or Switch",
            "   Port are not reflected in this bit.",
            "",
            "   Default value of this bit is 0b.",
            " >>Cap+",
            "     Capabilities List – Indicates the presence of an Extended",
            "     Capability list item. Since all PCI Express device Functions are",
            "     required to implement the PCI Express Capability structure, this",
            "     bit must be hardwired to 1b.",
            "",
            " >>66MHz",
            "     66 MHz Capable – Does not apply to PCI Express and must be hardwired to 0b.",
            "",
            " >>FastB2B",
            "     Fast Back-to-Back Transactions Capable – Does not apply to",
            "     PCI Express and must be hardwired to 0b.",
            "",
            " >>ParErr",
            "     Master Data Parity Error – See Section.",
            "     This bit is Set by an Endpoint Function if the Parity Error",
            "     Response bit in the Command register is 1b and either of the",
            "     following two conditions occurs:",
            "",
            "     - Endpoint receives a Poisoned Completion",
            "",
            "     - Endpoint transmits a Poisoned Request",
            "",
            "     This bit is Set by a Root Port, Switch Upstream Port, or Switch",
            "     Downstream Port if the Parity Error Response bit in the",
            "     Command register is 1b and either of the following two",
            "     conditions occurs:",
            "",
            "     - Port receives a Poisoned Completion going Downstream",
            "",
            "     - Port transmits a Poisoned Request Upstream",
            "",
            "     If the Parity Error Response bit is 0b, this bit is never Set.",
            "     Default value of this bit is 0b.",
            "",
            " >>DEVSEL",
            "     DEVSEL Timing – Does not apply to PCI Express and must be hardwired to 00b.",
            "",
            " >> >TAbort",
            "     Signaled Target Abort – ",
            "     This bit is Set when a Function completes a Posted or Non-",
            "     Posted Request as a Completer Abort error.",
            "     This applies to a Function with a Type 1 Configuration header when the",
            "     Completer Abort was generated by its Primary Side.",
            "",
            "     Default value of this bit is 0b.",
            "",
            " >> <TAbort",      
            "     Received Target Abort – ",
            "     This bit is Set when a Requester receives a Completion with",
            "     Completer Abort Completion Status. On a Function with a Type",
            "     1 Configuration header, the bit is Set when the Completer Abort",
            "     is received by its Primary Side.",
            "",
            "     Default value of this bit is 0b.",
            "",
            " >> <MAbort",
            "     Received Master Abort – ",
            "     This bit is Set when a Requester receives a Completion with Unsupported Request ",
            "     Completion Status. On a Function with a Type 1 Configuration header, the bit is Set",
            "     when the Unsupported Request is received by its Primary Side.",
            "",
            "     Default value of this bit is 0b.",
            "",
            " >> >SERR",
            "     SERR – This bit is Set when a Function sends an ERR_FATAL or ERR_NONFATAL Message,",
            "     and the SERR# Enable bit in the Command register is 1.",
            "",
            "     Default value of this bit is 0b.",
            "",
            " >> <PERR",
            "     Detected Parity Error – This bit is Set by a Function whenever it",
            "     receives a Poisoned, TLP regardless of the state of the Parity",
            "     Error Response bit in the, Command register. On a Function with a Type 1 Configuration",
            "     header, the bit is Set when the Poisoned TLP is received by its Primary Side.",
            "",
            "     Default value of this bit is 0b."
        ]     
     },
      "Cache Line Size": {
        "Cache Line Size Register": [
          "The Cache Line Size register is typically configured by the system firmware",
          "or the operating system to match the system cache line size.",
          "",
          "However, legacy PCI 3.0 software may encounter difficulties in correctly",
          "programming this field, particularly in Hot-Plug devices. This issue is addressed",
          "by PCI Express 5 devices through implementation for legacy compatibility.",
          "",
          "It's important to note that this register has no impact on the behavior of any",
          "PCI Express device. For guidance on PCI Express to PCI/PCI-X Bridges, please",
          "consult the PCI Express to PCI/PCI-X Bridge Specification.",
          "",
          "The default value of this register is 00h."
        ]
      },
      "Base Address": {
        "Base Address Register": [
          "A PCI Express Function requesting Memory Space through a BAR must set the BAR's ",
          "Prefetchable bit unless the range contains locations with read side",
          "effects or locations in which the Function does not tolerate write merging.",
          "It is strongly encouraged that resources mapped into Memory Space be",
          "designed as prefetchable whenever possible.",
          "",
          "PCI Express Functions other than Legacy Endpoints must support 64-bit",
          "addressing for any Base Address register that requests prefetchable Memory Space.",
          "",
          "The minimum Memory Space address range requested by a BAR is 128 bytes.",
          "The attributes for some of the bits in the BAR are affected",
          "by the Resizable BAR Capability, if it is implemented."
        ]
      },
      "Latency Timer": {
        "Latency Timer Register": [
          "This register is also referred to as Primary Latency Timer for Type 1",
          "Configuration Space header Functions.",
          "The Latency Timer does not apply to PCI Express.",
          "This register must be hardwired to",
          "00h."
        ]
      },
      "Header Type": {
        "Header Type Register": [
        "This register identifies the layout of the second part of the",
        "predefined header (beginning at byte 10h 15 in Configuration Space)",
        "and also whether or not the Device might contain multiple Functions."
        ]
      },
      "Class Code": {
        "Class Code Register": [
        "The use of Host Bridge PCI class code is Reserved for backwards",
        "compatibility; host Bridge Configuration Space is opaque to standard",
        "PCI Express software and may be implemented in an implementation specific",
        "manner that is compatible with PCI Host Bridge Type 0 Configuration Space.",
        "",
        "A PCI Express Host Bridge is not required to signal",
        "errors through a Root Complex Event Collector.",
        "This support is optional for PCI Express Host Bridges."
        ]
      },
       "BIST": {
         "BIST Register": [
          "The Built-In Self-Test (BIST) for PCI Express (PCIe) is a feature defined ",
          "in the PCIe specification that allows a PCIe device to test its own functionality.",
          "The BIST is typically used to test the device during the power-on self-test",
          "(POST) phase of the system boot process."
        ]
      },
     "Revision ID": {
        "Revision ID Register": [
            "When a device is connected to a Linux system, the kernel identifies it using",
            "various pieces of information, including its vendor ID, device ID, and revision ID.",
            "The revision ID specifically indicates the version or revision of the device,",
            "which can sometimes be important for driver compatibility or for distinguishing",
            "between different revisions of the same hardware.",
            "",
            "In the case of PCI Express devices, the revision ID is part of the device's",
            "configuration space, which the operating system can read to determine the device's",
            "characteristics and capabilities."
        ]
      },
     "CIS Pointer": {
        "CIS pointer Register": [
            "The CardBus Common Interface Specification (CIS) pointer is a mechanism",
            "used to access configuration information stored on CardBus devices.",
            "CardBus is an extension of the PC Card (PCMCIA) standard and is typically",
            "used for adding functionality to laptops and other portable computers.",
            "",
            "",
            "Key Points:",
            "",
            "1. Configuration Space: CardBus devices, like other PCI devices, have a",
            "configuration space that contains information about the device's",
            "capabilities and settings. This space is accessed through configuration",
            "registers.",
            "",
            "2. CIS Pointer: The CIS pointer is a register within the configuration",
            "space of a CardBus device. It points to a data structure known as the",
            "Card Information Structure (CIS), which contains information about the",
            "device's capabilities, supported features, and other relevant data.",
            "",
            "3. Parsing CIS: In Linux, drivers often need to parse the CIS to identify",
            "and configure CardBus devices correctly. This involves reading the CIS",
            "pointer from the device's configuration space and then accessing the CIS",
            "data structure to extract the necessary information."
        ]
      },
     "Subsystem ID": {
        "Subsystem ID Register": [
            "Subsystem ID (subsys_device): The subsystem ID is a unique identifier assigned to a specific",
            "device within a vendor's product line. It distinguishes different models or revisions of the",
            "same device produced by a particular vendor.",
            "",
            "This ID is used by the kernel to match a specific device driver with a particular",
            "PCIe device. For instance, if a PCIe device with a specific subsystem ID is",
            "detected, the kernel knows which driver to load to manage that device."
        ]
      },
     "Subsystem Vendor ID": {
        "Subsystem Vendor Register": [
             "Subsystem Vendor ID (subsys_vendor): The subsystem vendor ID identifies the manufacturer of",
             "the device within the broader context of the PCI subsystem. This ID, combined with the",
             "subsystem ID, provides a more granular identification of a device. It helps the kernel",
             "to ascertain which vendor's device it's dealing with, allowing it to load the appropriate",
             "drivers and handle the device correctly."
        ]
      },
    "Device ID": {
        "Device ID Register": [
            "The 'Device ID' in the lspci output, such as 01:00.0, follows this structure:",
            "",
            "",
            "1. [01] represents the PCI bus number, indicating the physical bus on the motherboard.",
            "",
            "2. [:00] indicates the device's position on the bus, specifying the slot it occupies.",
            "",
            "3 [.0] indicates the function number of the device.",
            "",
            "Most devices have only one function, so it's typically .0, but some devices have multiple.",
            "functions. This hierarchical structure uniquely identifies each PCI device in the",
            "system, aiding in system analysis and troubleshooting.",
            "",
            "By combining these three components (bus:device.function), the Device ID uniquely ",
            "identifies each PCI device in the system. This information is crucial for ",
            "the operating system to manage and interact with the hardware effectively. ",
            "It helps in device enumeration, driver assignment, and resource allocation within the system."
            
        ]
    },
    "Vendor ID": {
        "Vendor ID Register": [
            "The Vendor ID (Vendor Identification Number or VID) is a unique identifier assigned to hardware",
            "manufacturers by the PCI Special Interest Group (PCI-SIG). It is a 16-bit number used to",
            "distinguish one",
            "manufacturer from another in the realm of PCI (Peripheral Component Interconnect) devices.", 
            "Each vendor is assigned a specific Vendor ID, which helps in identifying the manufacturer of a",
            "particular device or component.",
            "",
            "Vendor IDs are typically represented in hexadecimal format and are commonly encountered",
            "when querying hardware information on a system, such as through commands like lspci in",
            "Linux or through device manager utilities in operating systems like Windows.",
            "",
            "Understanding Vendor IDs is crucial for various purposes, including identifying hardware",
            "components, troubleshooting driver issues, ensuring hardware compatibility, and facilitating",
            "device management within a system.",
            "",
            "",
            "[02:00.0 VGA compatible controller: NVIDIA Corporation GP104 [GeForce GTX 1080] (rev a1)]",
            "",
            "In this example:",
            "The manufacturer is NVIDIA Corporation.",
            "The Vendor ID assigned to NVIDIA by the PCI-SIG is '10de' (in hexadecimal).",
            "The device is identified as a 'GeForce GTX 1080' graphics card." 
        ]
    },
      "Control": {
        "Control Register": [
          "Control Bit Locations",
          "",
          "Interrupt Disable – |10|",
          "Fast Back-to-Back Transactions Enable – |9|",
          "SERR# Enable – |8|",
          "IDSEL Stepping/Wait Cycle Control – |7|",
          "Parity Error Response – |6|",
          "VGA Palette Snoop – |5|",
          "Memory Write and Invalidate – |4|",
          "Special Cycle Enable – |3|",
          "Bus Master Enable – |2|"
        ]
      },
      "Status": {
        "Status Register": [
          "Status Bit Locations", 
           "",
          "Detected Parity Error – |15|",
          "Signaled System Error – |14|",
          "Received Master Abort – |13|",
          "Received Target Abort – |12|",
          "Signaled Target Abort – |11|",
          "DEVSEL Timing  – |10:9|",
          "Master Data Parity Error – |8|", 
          "Fast Back-to-Back Transactions Capable – |7|",
          "66 MHz Capable – |5|",
          "Capabilities List – |4|",
          "Interrupt Status – |3|"
        ]
      },
    "Linux_Help": {
        "guide": [
            ">> Introducing the Ubuntu Terminal-Inspired Graphical User Interface (GUI)",
            "",
            "Welcome to a custom-designed graphical user interface (GUI) inspired by the functionality ",
            "of the Linux Ubuntu terminal. This innovative interface offers users the convenience and",
            "familiarity of the Ubuntu terminal environment within a sleek and intuitive graphical",
            "interface. With this GUI users can seamlessly execute commands such as 'sudo' for elevated",
            "privileges, 'lspci' to list PCI devices, and more, all within a user-friendly environment.",
            "",
            "",
            ">> Enhancing User Experience: Seamlessly Transitioning to a Graphical Environment",
            "",
            "This GUI strives to enhance user experience by providing a seamless transition ",
            "from the traditional command-line interface to a visually appealing graphical environment.",
            "By replicating the functionality of the Ubuntu terminal, users can harness the",
            "power of essential commands without the need for extensive command-line knowledge.",
            "Whether you're a seasoned",
            "Linux user or a newcomer to the Ubuntu ecosystem, this GUI offers an",
            "accessible and efficient means to interact with your system.",
            "",
            "",
            ">> Prioritizing Security and Efficiency: Empowering Users with Secure Command Execution",
            "",
            "Furthermore, this GUI prioritizes security and efficiency, ensuring that",
            "users can confidently execute privileged commands like 'sudo' while maintaining system",
            "integrity. By integrating essential features such as password authentication",
            "for 'sudo' commands, it upholds the principles of security and accountability,",
            "making this GUI a reliable tool for system administration and everyday tasks.",
            "Experience the power of the Linux Ubuntu terminal in a user-friendly graphical interface",
            "with this innovative GUI solution.",
            "",
            "",
            "[#] Introducing the [Report Interpret BUTTON] Enhanced PCI Device Interaction Feature:",
            "",
            " In addition to replicating the Ubuntu terminal's functionality, our custom GUI offers an",
            " advanced feature for interacting with PCI devices. Through a user-friendly interface,",
            " users can access detailed register information using intuitive buttons, providing ",
            " unprecedented ease of use and clarity in system management.",
            "",
            "",
            "[#] Interactive Button Interface for PCI Registers:",
            "",
            " Each button within the GUI corresponds to a specific register within the lspci -vvv ",
            " command output, providing the most verbose information on all devices. When a user " ,
            " clicks on a button representing a device, the GUI dynamically updates to display the  " ,
            " hexadecimal values associated with that device. These hexadecimal values, each 32 bits " ,
            " long, represent the active and inactive states of various device features.",
            "",
            "",
            "[#] Real-Time Binary Display Update:",
            "",
            " Upon button press, the hexadecimal value is converted into a 32-bit binary ,", 
            " representation with the most significant bit (MSB) on the far left and the least" ,
            " significant bit (LSB) on the far right. This binary display is updated in",
            " real-time, giving users immediate visual feedback on the status of each feature",
            " associated with the selected PCI device.",
            "",
            "",
            "[#] Integrated Description Catalog:",
            "",
            " To further enhance user understanding, the GUI incorporates a concise catalog ", 
            " that maps each bit within the 32-bit binary display to its specific function within " ,
            " the PCI Express specification. This catalog provides clear descriptions of " ,
            " each bit's purpose and the action it represents when set to a high or low state.",
            "",
            "",
            "[#] Data Retrieval and Display Integration:",
            "",  
            " Behind the scenes, the GUI retrieves device information from a JSON file,",
            " seamlessly integrating it into the interactive interface. This ensures that ",
            " users have access to accurate and up-to-date information regarding their PCI devices.",
            "",
            "",
            "[#] Empowering Users with Clarity and Control:",
            "",
            " By combining graphical simplicity with in-depth functionality, our GUI",
            " empowers users to efficiently manage PCI devices with confidence. Whether ",
            " troubleshooting, configuring, or monitoring device status, this feature-rich ",
            " interface offers unparalleled convenience and insight into system operations."
        ]
    }
}



            
           